services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/services/docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    # volumes:
    #   - ./backend/.env:/app/.env
    # env_file:
    #   - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - ENV_MODE=${ENV_MODE}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MORPH_API_KEY=${MORPH_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MODEL_TO_USE=${MODEL_TO_USE}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - FIRECRAWL_URL=${FIRECRAWL_URL}
      - RAPID_API_KEY=${RAPID_API_KEY}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_REDIRECT_URI=${SLACK_REDIRECT_URI}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL}
      - TRIGGER_WEBHOOK_SECRET=${TRIGGER_WEBHOOK_SECRET}
      - MCP_CREDENTIAL_ENCRYPTION_KEY=${MCP_CREDENTIAL_ENCRYPTION_KEY}
      - PIPEDREAM_PROJECT_ID=${PIPEDREAM_PROJECT_ID}
      - PIPEDREAM_CLIENT_ID=${PIPEDREAM_CLIENT_ID}
      - PIPEDREAM_CLIENT_SECRET=${PIPEDREAM_CLIENT_SECRET}
      - PIPEDREAM_X_PD_ENVIRONMENT=${PIPEDREAM_X_PD_ENVIRONMENT}
      - DAYTONA_API_KEY=${DAYTONA_API_KEY}
      - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL}
      - DAYTONA_TARGET=${DAYTONA_TARGET}
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_started

  worker:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run dramatiq --skip-logging --processes 4 --threads 4 run_agent_background
    # volumes:
    #   - ./backend/.env:/app/.env:ro
    # env_file:
    #   - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - ENV_MODE=${ENV_MODE}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MORPH_API_KEY=${MORPH_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MODEL_TO_USE=${MODEL_TO_USE}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - FIRECRAWL_URL=${FIRECRAWL_URL}
      - RAPID_API_KEY=${RAPID_API_KEY}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_REDIRECT_URI=${SLACK_REDIRECT_URI}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL}
      - TRIGGER_WEBHOOK_SECRET=${TRIGGER_WEBHOOK_SECRET}
      - MCP_CREDENTIAL_ENCRYPTION_KEY=${MCP_CREDENTIAL_ENCRYPTION_KEY}
      - PIPEDREAM_PROJECT_ID=${PIPEDREAM_PROJECT_ID}
      - PIPEDREAM_CLIENT_ID=${PIPEDREAM_CLIENT_ID}
      - PIPEDREAM_CLIENT_SECRET=${PIPEDREAM_CLIENT_SECRET}
      - PIPEDREAM_X_PD_ENVIRONMENT=${PIPEDREAM_X_PD_ENVIRONMENT}
      - DAYTONA_API_KEY=${DAYTONA_API_KEY}
      - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL}
      - DAYTONA_TARGET=${DAYTONA_TARGET}
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
    depends_on:
      redis:
        condition: service_healthy

  frontend:
    init: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    ports:
      - "3001:3001"
    environment:
      - NEXT_PUBLIC_ENV_MODE=${NEXT_PUBLIC_ENV_MODE}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY}
      - EDGE_CONFIG=${EDGE_CONFIG}
    # volumes:
    #   - ./frontend/.env.local:/app/.env.local:ro
    depends_on:
      - backend

volumes:
  redis_data: